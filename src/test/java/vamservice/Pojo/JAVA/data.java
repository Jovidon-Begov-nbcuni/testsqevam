package vamservice.Pojo.JAVA; /**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class data extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3437403260076893055L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\n" +
          "\t\"type\": \"record\",\n" +
          "\t\"name\": \"data\",\n" +
          "\t\"fields\": [{\n" +
          "\t\t\"name\": \"profile\",\n" +
          "\t\t\"type\": {\n" +
          "\t\t\t\"type\": \"record\",\n" +
          "\t\t\t\"name\": \"profile\",\n" +
          "\t\t\t\"fields\": [{\n" +
          "\t\t\t\t\"name\": \"username\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"targetedoptin\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"boolean\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"trackingid\",\n" +
          "\t\t\t\t\"type\": \"string\"\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"firstname\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"title\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"emailverified\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"boolean\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"targetedoptindate\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"services\",\n" +
          "\t\t\t\t\"type\": {\n" +
          "\t\t\t\t\t\"type\": \"map\",\n" +
          "\t\t\t\t\t\"values\": {\n" +
          "\t\t\t\t\t\t\"type\": \"record\",\n" +
          "\t\t\t\t\t\t\"name\": \"services_value\",\n" +
          "\t\t\t\t\t\t\"fields\": [{\n" +
          "\t\t\t\t\t\t\t\"name\": \"start\",\n" +
          "\t\t\t\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t\t\t\t}, {\n" +
          "\t\t\t\t\t\t\t\"name\": \"end\",\n" +
          "\t\t\t\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t\t\t\t}, {\n" +
          "\t\t\t\t\t\t\t\"name\": \"globalaccess\",\n" +
          "\t\t\t\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t\t\t\t}, {\n" +
          "\t\t\t\t\t\t\t\"name\": \"mailbox\",\n" +
          "\t\t\t\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t\t\t\t}, {\n" +
          "\t\t\t\t\t\t\t\"name\": \"name\",\n" +
          "\t\t\t\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t\t\t\t}, {\n" +
          "\t\t\t\t\t\t\t\"name\": \"suspended\",\n" +
          "\t\t\t\t\t\t\t\"type\": [\"null\", \"boolean\"]\n" +
          "\t\t\t\t\t\t}, {\n" +
          "\t\t\t\t\t\t\t\"name\": \"fullysignedup\",\n" +
          "\t\t\t\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t\t\t\t}]\n" +
          "\t\t\t\t\t}\n" +
          "\t\t\t\t}\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"mobilenumber\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"targetedoptoutdate\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"hhuserauthorised\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"dateofbirth\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"hhid\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"mobilenumberverified\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"boolean\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"displayname\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"securityquestionid\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"mobilenumberchanged\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"long\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"skyoptin\",\n" +
          "\t\t\t\t\"type\": \"boolean\"\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"email\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"contactemail\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"emailchanged\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"euportability\",\n" +
          "\t\t\t\t\"type\": \"boolean\"\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"hhusertype\",\n" +
          "\t\t\t\t\"type\": \"string\"\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"lastname\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"termsandconditionsaccepted\",\n" +
          "\t\t\t\t\"type\": \"boolean\"\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"nsprofileid\",\n" +
          "\t\t\t\t\"type\": \"string\"\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"passwordrequireschange\",\n" +
          "\t\t\t\t\"type\": [\"null\", \"boolean\"]\n" +
          "\t\t\t}, {\n" +
          "\t\t\t\t\"name\": \"registrationdate\",\n" +
          "\t\t\t\t\"type\": \"string\"\n" +
          "\t\t\t}]\n" +
          "\t\t}\n" +
          "\t}, {\n" +
          "\t\t\"name\": \"singleusetoken\",\n" +
          "\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t}, {\n" +
          "\t\t\"name\": \"servicename\",\n" +
          "\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t}, {\n" +
          "\t\t\"name\": \"contexturl\",\n" +
          "\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t}, {\n" +
          "\t\t\"name\": \"operatorreference\",\n" +
          "\t\t\"type\": [\"null\", \"string\"]\n" +
          "\t}, {\n" +
          "\t\t\"name\": \"obfuscatedids\",\n" +
          "\t\t\"type\": {\n" +
          "\t\t\t\"type\": \"map\",\n" +
          "\t\t\t\"values\": {\n" +
          "\t\t\t\t\"type\": \"record\",\n" +
          "\t\t\t\t\"name\": \"obfuscatedids_value\",\n" +
          "\t\t\t\t\"fields\": [{\n" +
          "\t\t\t\t\t\"name\": \"profileid\",\n" +
          "\t\t\t\t\t\"type\": \"string\"\n" +
          "\t\t\t\t}, {\n" +
          "\t\t\t\t\t\"name\": \"partyid\",\n" +
          "\t\t\t\t\t\"type\": \"string\"\n" +
          "\t\t\t\t}]\n" +
          "\t\t\t}\n" +
          "\t\t}\n" +
          "\t}]\n" +
          "}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<data> ENCODER =
      new BinaryMessageEncoder<data>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<data> DECODER =
      new BinaryMessageDecoder<data>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<data> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<data> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<data> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<data>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this data to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a data from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a data instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static data fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private profile profile;
   private java.lang.CharSequence singleusetoken;
   private java.lang.CharSequence servicename;
   private java.lang.CharSequence contexturl;
   private java.lang.CharSequence operatorreference;
   private java.util.Map<java.lang.CharSequence,obfuscatedids_value> obfuscatedids;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public data() {}

  /**
   * All-args constructor.
   * @param profile The new value for profile
   * @param singleusetoken The new value for singleusetoken
   * @param servicename The new value for servicename
   * @param contexturl The new value for contexturl
   * @param operatorreference The new value for operatorreference
   * @param obfuscatedids The new value for obfuscatedids
   */
  public data(profile profile, java.lang.CharSequence singleusetoken, java.lang.CharSequence servicename, java.lang.CharSequence contexturl, java.lang.CharSequence operatorreference, java.util.Map<java.lang.CharSequence,obfuscatedids_value> obfuscatedids) {
    this.profile = profile;
    this.singleusetoken = singleusetoken;
    this.servicename = servicename;
    this.contexturl = contexturl;
    this.operatorreference = operatorreference;
    this.obfuscatedids = obfuscatedids;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return profile;
    case 1: return singleusetoken;
    case 2: return servicename;
    case 3: return contexturl;
    case 4: return operatorreference;
    case 5: return obfuscatedids;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: profile = (profile)value$; break;
    case 1: singleusetoken = (java.lang.CharSequence)value$; break;
    case 2: servicename = (java.lang.CharSequence)value$; break;
    case 3: contexturl = (java.lang.CharSequence)value$; break;
    case 4: operatorreference = (java.lang.CharSequence)value$; break;
    case 5: obfuscatedids = (java.util.Map<java.lang.CharSequence,obfuscatedids_value>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'profile' field.
   * @return The value of the 'profile' field.
   */
  public profile getProfile() {
    return profile;
  }


  /**
   * Sets the value of the 'profile' field.
   * @param value the value to set.
   */
  public void setProfile(profile value) {
    this.profile = value;
  }

  /**
   * Gets the value of the 'singleusetoken' field.
   * @return The value of the 'singleusetoken' field.
   */
  public java.lang.CharSequence getSingleusetoken() {
    return singleusetoken;
  }


  /**
   * Sets the value of the 'singleusetoken' field.
   * @param value the value to set.
   */
  public void setSingleusetoken(java.lang.CharSequence value) {
    this.singleusetoken = value;
  }

  /**
   * Gets the value of the 'servicename' field.
   * @return The value of the 'servicename' field.
   */
  public java.lang.CharSequence getServicename() {
    return servicename;
  }


  /**
   * Sets the value of the 'servicename' field.
   * @param value the value to set.
   */
  public void setServicename(java.lang.CharSequence value) {
    this.servicename = value;
  }

  /**
   * Gets the value of the 'contexturl' field.
   * @return The value of the 'contexturl' field.
   */
  public java.lang.CharSequence getContexturl() {
    return contexturl;
  }


  /**
   * Sets the value of the 'contexturl' field.
   * @param value the value to set.
   */
  public void setContexturl(java.lang.CharSequence value) {
    this.contexturl = value;
  }

  /**
   * Gets the value of the 'operatorreference' field.
   * @return The value of the 'operatorreference' field.
   */
  public java.lang.CharSequence getOperatorreference() {
    return operatorreference;
  }


  /**
   * Sets the value of the 'operatorreference' field.
   * @param value the value to set.
   */
  public void setOperatorreference(java.lang.CharSequence value) {
    this.operatorreference = value;
  }

  /**
   * Gets the value of the 'obfuscatedids' field.
   * @return The value of the 'obfuscatedids' field.
   */
  public java.util.Map<java.lang.CharSequence,obfuscatedids_value> getObfuscatedids() {
    return obfuscatedids;
  }


  /**
   * Sets the value of the 'obfuscatedids' field.
   * @param value the value to set.
   */
  public void setObfuscatedids(java.util.Map<java.lang.CharSequence,obfuscatedids_value> value) {
    this.obfuscatedids = value;
  }

  /**
   * Creates a new data RecordBuilder.
   * @return A new data RecordBuilder
   */
  public static data.Builder newBuilder() {
    return new data.Builder();
  }

  /**
   * Creates a new data RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new data RecordBuilder
   */
  public static data.Builder newBuilder(data.Builder other) {
    if (other == null) {
      return new data.Builder();
    } else {
      return new data.Builder(other);
    }
  }

  /**
   * Creates a new data RecordBuilder by copying an existing data instance.
   * @param other The existing instance to copy.
   * @return A new data RecordBuilder
   */
  public static data.Builder newBuilder(data other) {
    if (other == null) {
      return new data.Builder();
    } else {
      return new data.Builder(other);
    }
  }

  /**
   * RecordBuilder for data instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<data>
    implements org.apache.avro.data.RecordBuilder<data> {

    private profile profile;
    private profile.Builder profileBuilder;
    private java.lang.CharSequence singleusetoken;
    private java.lang.CharSequence servicename;
    private java.lang.CharSequence contexturl;
    private java.lang.CharSequence operatorreference;
    private java.util.Map<java.lang.CharSequence,obfuscatedids_value> obfuscatedids;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(data.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.profile)) {
        this.profile = data().deepCopy(fields()[0].schema(), other.profile);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasProfileBuilder()) {
        this.profileBuilder = profile.newBuilder(other.getProfileBuilder());
      }
      if (isValidValue(fields()[1], other.singleusetoken)) {
        this.singleusetoken = data().deepCopy(fields()[1].schema(), other.singleusetoken);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.servicename)) {
        this.servicename = data().deepCopy(fields()[2].schema(), other.servicename);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.contexturl)) {
        this.contexturl = data().deepCopy(fields()[3].schema(), other.contexturl);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.operatorreference)) {
        this.operatorreference = data().deepCopy(fields()[4].schema(), other.operatorreference);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.obfuscatedids)) {
        this.obfuscatedids = data().deepCopy(fields()[5].schema(), other.obfuscatedids);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing data instance
     * @param other The existing instance to copy.
     */
    private Builder(data other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.profile)) {
        this.profile = data().deepCopy(fields()[0].schema(), other.profile);
        fieldSetFlags()[0] = true;
      }
      this.profileBuilder = null;
      if (isValidValue(fields()[1], other.singleusetoken)) {
        this.singleusetoken = data().deepCopy(fields()[1].schema(), other.singleusetoken);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.servicename)) {
        this.servicename = data().deepCopy(fields()[2].schema(), other.servicename);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.contexturl)) {
        this.contexturl = data().deepCopy(fields()[3].schema(), other.contexturl);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.operatorreference)) {
        this.operatorreference = data().deepCopy(fields()[4].schema(), other.operatorreference);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.obfuscatedids)) {
        this.obfuscatedids = data().deepCopy(fields()[5].schema(), other.obfuscatedids);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'profile' field.
      * @return The value.
      */
    public profile getProfile() {
      return profile;
    }


    /**
      * Sets the value of the 'profile' field.
      * @param value The value of 'profile'.
      * @return This builder.
      */
    public data.Builder setProfile(profile value) {
      validate(fields()[0], value);
      this.profileBuilder = null;
      this.profile = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'profile' field has been set.
      * @return True if the 'profile' field has been set, false otherwise.
      */
    public boolean hasProfile() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'profile' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public profile.Builder getProfileBuilder() {
      if (profileBuilder == null) {
        if (hasProfile()) {
          setProfileBuilder(profile.newBuilder(profile));
        } else {
          setProfileBuilder(profile.newBuilder());
        }
      }
      return profileBuilder;
    }

    /**
     * Sets the Builder instance for the 'profile' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public data.Builder setProfileBuilder(profile.Builder value) {
      clearProfile();
      profileBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'profile' field has an active Builder instance
     * @return True if the 'profile' field has an active Builder instance
     */
    public boolean hasProfileBuilder() {
      return profileBuilder != null;
    }

    /**
      * Clears the value of the 'profile' field.
      * @return This builder.
      */
    public data.Builder clearProfile() {
      profile = null;
      profileBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'singleusetoken' field.
      * @return The value.
      */
    public java.lang.CharSequence getSingleusetoken() {
      return singleusetoken;
    }


    /**
      * Sets the value of the 'singleusetoken' field.
      * @param value The value of 'singleusetoken'.
      * @return This builder.
      */
    public data.Builder setSingleusetoken(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.singleusetoken = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'singleusetoken' field has been set.
      * @return True if the 'singleusetoken' field has been set, false otherwise.
      */
    public boolean hasSingleusetoken() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'singleusetoken' field.
      * @return This builder.
      */
    public data.Builder clearSingleusetoken() {
      singleusetoken = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'servicename' field.
      * @return The value.
      */
    public java.lang.CharSequence getServicename() {
      return servicename;
    }


    /**
      * Sets the value of the 'servicename' field.
      * @param value The value of 'servicename'.
      * @return This builder.
      */
    public data.Builder setServicename(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.servicename = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'servicename' field has been set.
      * @return True if the 'servicename' field has been set, false otherwise.
      */
    public boolean hasServicename() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'servicename' field.
      * @return This builder.
      */
    public data.Builder clearServicename() {
      servicename = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'contexturl' field.
      * @return The value.
      */
    public java.lang.CharSequence getContexturl() {
      return contexturl;
    }


    /**
      * Sets the value of the 'contexturl' field.
      * @param value The value of 'contexturl'.
      * @return This builder.
      */
    public data.Builder setContexturl(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.contexturl = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'contexturl' field has been set.
      * @return True if the 'contexturl' field has been set, false otherwise.
      */
    public boolean hasContexturl() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'contexturl' field.
      * @return This builder.
      */
    public data.Builder clearContexturl() {
      contexturl = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'operatorreference' field.
      * @return The value.
      */
    public java.lang.CharSequence getOperatorreference() {
      return operatorreference;
    }


    /**
      * Sets the value of the 'operatorreference' field.
      * @param value The value of 'operatorreference'.
      * @return This builder.
      */
    public data.Builder setOperatorreference(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.operatorreference = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'operatorreference' field has been set.
      * @return True if the 'operatorreference' field has been set, false otherwise.
      */
    public boolean hasOperatorreference() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'operatorreference' field.
      * @return This builder.
      */
    public data.Builder clearOperatorreference() {
      operatorreference = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'obfuscatedids' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,obfuscatedids_value> getObfuscatedids() {
      return obfuscatedids;
    }


    /**
      * Sets the value of the 'obfuscatedids' field.
      * @param value The value of 'obfuscatedids'.
      * @return This builder.
      */
    public data.Builder setObfuscatedids(java.util.Map<java.lang.CharSequence,obfuscatedids_value> value) {
      validate(fields()[5], value);
      this.obfuscatedids = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'obfuscatedids' field has been set.
      * @return True if the 'obfuscatedids' field has been set, false otherwise.
      */
    public boolean hasObfuscatedids() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'obfuscatedids' field.
      * @return This builder.
      */
    public data.Builder clearObfuscatedids() {
      obfuscatedids = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public data build() {
      try {
        data record = new data();
        if (profileBuilder != null) {
          try {
            record.profile = this.profileBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("profile"));
            throw e;
          }
        } else {
          record.profile = fieldSetFlags()[0] ? this.profile : (profile) defaultValue(fields()[0]);
        }
        record.singleusetoken = fieldSetFlags()[1] ? this.singleusetoken : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.servicename = fieldSetFlags()[2] ? this.servicename : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.contexturl = fieldSetFlags()[3] ? this.contexturl : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.operatorreference = fieldSetFlags()[4] ? this.operatorreference : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.obfuscatedids = fieldSetFlags()[5] ? this.obfuscatedids : (java.util.Map<java.lang.CharSequence,obfuscatedids_value>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<data>
    WRITER$ = (org.apache.avro.io.DatumWriter<data>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<data>
    READER$ = (org.apache.avro.io.DatumReader<data>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.profile.customEncode(out);

    if (this.singleusetoken == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.singleusetoken);
    }

    if (this.servicename == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.servicename);
    }

    if (this.contexturl == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.contexturl);
    }

    if (this.operatorreference == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.operatorreference);
    }

    long size0 = this.obfuscatedids.size();
    out.writeMapStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, obfuscatedids_value> e0: this.obfuscatedids.entrySet()) {
      actualSize0++;
      out.startItem();
      out.writeString(e0.getKey());
      obfuscatedids_value v0 = e0.getValue();
      v0.customEncode(out);
    }
    out.writeMapEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.profile == null) {
        this.profile = new profile();
      }
      this.profile.customDecode(in);

      if (in.readIndex() != 1) {
        in.readNull();
        this.singleusetoken = null;
      } else {
        this.singleusetoken = in.readString(this.singleusetoken instanceof Utf8 ? (Utf8)this.singleusetoken : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.servicename = null;
      } else {
        this.servicename = in.readString(this.servicename instanceof Utf8 ? (Utf8)this.servicename : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.contexturl = null;
      } else {
        this.contexturl = in.readString(this.contexturl instanceof Utf8 ? (Utf8)this.contexturl : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.operatorreference = null;
      } else {
        this.operatorreference = in.readString(this.operatorreference instanceof Utf8 ? (Utf8)this.operatorreference : null);
      }

      long size0 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,obfuscatedids_value> m0 = this.obfuscatedids; // Need fresh name due to limitation of macro system
      if (m0 == null) {
        m0 = new java.util.HashMap<java.lang.CharSequence,obfuscatedids_value>((int)size0);
        this.obfuscatedids = m0;
      } else m0.clear();
      for ( ; 0 < size0; size0 = in.mapNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence k0 = null;
          k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
          obfuscatedids_value v0 = null;
          if (v0 == null) {
            v0 = new obfuscatedids_value();
          }
          v0.customDecode(in);
          m0.put(k0, v0);
        }
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.profile == null) {
            this.profile = new profile();
          }
          this.profile.customDecode(in);
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.singleusetoken = null;
          } else {
            this.singleusetoken = in.readString(this.singleusetoken instanceof Utf8 ? (Utf8)this.singleusetoken : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.servicename = null;
          } else {
            this.servicename = in.readString(this.servicename instanceof Utf8 ? (Utf8)this.servicename : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.contexturl = null;
          } else {
            this.contexturl = in.readString(this.contexturl instanceof Utf8 ? (Utf8)this.contexturl : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.operatorreference = null;
          } else {
            this.operatorreference = in.readString(this.operatorreference instanceof Utf8 ? (Utf8)this.operatorreference : null);
          }
          break;

        case 5:
          long size0 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,obfuscatedids_value> m0 = this.obfuscatedids; // Need fresh name due to limitation of macro system
          if (m0 == null) {
            m0 = new java.util.HashMap<java.lang.CharSequence,obfuscatedids_value>((int)size0);
            this.obfuscatedids = m0;
          } else m0.clear();
          for ( ; 0 < size0; size0 = in.mapNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence k0 = null;
              k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
              obfuscatedids_value v0 = null;
              if (v0 == null) {
                v0 = new obfuscatedids_value();
              }
              v0.customDecode(in);
              m0.put(k0, v0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










